// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// soft
arma::vec soft(arma::vec x, double a);
RcppExport SEXP _latent_soft(SEXP xSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(soft(x, a));
    return rcpp_result_gen;
END_RCPP
}
// optimizer
Rcpp::List optimizer(Rcpp::List control_manifold, Rcpp::List control_transform, Rcpp::List control_estimator, Rcpp::List control_optimizer);
RcppExport SEXP _latent_optimizer(SEXP control_manifoldSEXP, SEXP control_transformSEXP, SEXP control_estimatorSEXP, SEXP control_optimizerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type control_manifold(control_manifoldSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type control_transform(control_transformSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type control_estimator(control_estimatorSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type control_optimizer(control_optimizerSEXP);
    rcpp_result_gen = Rcpp::wrap(optimizer(control_manifold, control_transform, control_estimator, control_optimizer));
    return rcpp_result_gen;
END_RCPP
}
// polyfast
Rcpp::List polyfast(arma::mat data, std::string missing, const std::string acov, const std::string smooth, double min_eigval, const int nboot, const bool fit, const int cores);
RcppExport SEXP _latent_polyfast(SEXP dataSEXP, SEXP missingSEXP, SEXP acovSEXP, SEXP smoothSEXP, SEXP min_eigvalSEXP, SEXP nbootSEXP, SEXP fitSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::string >::type missing(missingSEXP);
    Rcpp::traits::input_parameter< const std::string >::type acov(acovSEXP);
    Rcpp::traits::input_parameter< const std::string >::type smooth(smoothSEXP);
    Rcpp::traits::input_parameter< double >::type min_eigval(min_eigvalSEXP);
    Rcpp::traits::input_parameter< const int >::type nboot(nbootSEXP);
    Rcpp::traits::input_parameter< const bool >::type fit(fitSEXP);
    Rcpp::traits::input_parameter< const int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(polyfast(data, missing, acov, smooth, min_eigval, nboot, fit, cores));
    return rcpp_result_gen;
END_RCPP
}
// asymptotic_normal
arma::mat asymptotic_normal(arma::mat P);
RcppExport SEXP _latent_asymptotic_normal(SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(asymptotic_normal(P));
    return rcpp_result_gen;
END_RCPP
}
// asymptotic_general
arma::mat asymptotic_general(arma::mat X);
RcppExport SEXP _latent_asymptotic_general(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(asymptotic_general(X));
    return rcpp_result_gen;
END_RCPP
}
// DACOV2
arma::mat DACOV2(int n, arma::mat poly, std::vector<std::vector<std::vector<int>>> tabs, std::vector<std::vector<double>> taus, std::vector<std::vector<double>> mvphis);
RcppExport SEXP _latent_DACOV2(SEXP nSEXP, SEXP polySEXP, SEXP tabsSEXP, SEXP tausSEXP, SEXP mvphisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type poly(polySEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<std::vector<int>>> >::type tabs(tabsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<double>> >::type taus(tausSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<double>> >::type mvphis(mvphisSEXP);
    rcpp_result_gen = Rcpp::wrap(DACOV2(n, poly, tabs, taus, mvphis));
    return rcpp_result_gen;
END_RCPP
}
// orth
arma::mat orth(arma::mat X);
RcppExport SEXP _latent_orth(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(orth(X));
    return rcpp_result_gen;
END_RCPP
}
// oblq
arma::mat oblq(arma::mat X);
RcppExport SEXP _latent_oblq(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(oblq(X));
    return rcpp_result_gen;
END_RCPP
}
// poblq
arma::mat poblq(arma::mat X, arma::mat target);
RcppExport SEXP _latent_poblq(SEXP XSEXP, SEXP targetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type target(targetSEXP);
    rcpp_result_gen = Rcpp::wrap(poblq(X, target));
    return rcpp_result_gen;
END_RCPP
}
// rorth
arma::mat rorth(int p, int q);
RcppExport SEXP _latent_rorth(SEXP pSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(rorth(p, q));
    return rcpp_result_gen;
END_RCPP
}
// roblq
arma::mat roblq(int p, int q);
RcppExport SEXP _latent_roblq(SEXP pSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(roblq(p, q));
    return rcpp_result_gen;
END_RCPP
}
// rpoblq
arma::mat rpoblq(int p, int q, arma::mat target);
RcppExport SEXP _latent_rpoblq(SEXP pSEXP, SEXP qSEXP, SEXP targetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type target(targetSEXP);
    rcpp_result_gen = Rcpp::wrap(rpoblq(p, q, target));
    return rcpp_result_gen;
END_RCPP
}
// grad_comp
Rcpp::List grad_comp(Rcpp::List control_manifold, Rcpp::List control_transform, Rcpp::List control_estimator, Rcpp::List control_optimizer, std::string compute, double eps);
RcppExport SEXP _latent_grad_comp(SEXP control_manifoldSEXP, SEXP control_transformSEXP, SEXP control_estimatorSEXP, SEXP control_optimizerSEXP, SEXP computeSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type control_manifold(control_manifoldSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type control_transform(control_transformSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type control_estimator(control_estimatorSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type control_optimizer(control_optimizerSEXP);
    Rcpp::traits::input_parameter< std::string >::type compute(computeSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_comp(control_manifold, control_transform, control_estimator, control_optimizer, compute, eps));
    return rcpp_result_gen;
END_RCPP
}
// vcov_all
Rcpp::List vcov_all(Rcpp::List control_manifold, Rcpp::List control_transform, Rcpp::List control_estimator, Rcpp::List control_optimizer, arma::mat H);
RcppExport SEXP _latent_vcov_all(SEXP control_manifoldSEXP, SEXP control_transformSEXP, SEXP control_estimatorSEXP, SEXP control_optimizerSEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type control_manifold(control_manifoldSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type control_transform(control_transformSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type control_estimator(control_estimatorSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type control_optimizer(control_optimizerSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type H(HSEXP);
    rcpp_result_gen = Rcpp::wrap(vcov_all(control_manifold, control_transform, control_estimator, control_optimizer, H));
    return rcpp_result_gen;
END_RCPP
}
// real_sqrtmat
arma::mat real_sqrtmat(arma::mat R);
RcppExport SEXP _latent_real_sqrtmat(SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(real_sqrtmat(R));
    return rcpp_result_gen;
END_RCPP
}
// count
std::vector<int> count(const std::vector<int>& X, const int n, const int max_X);
RcppExport SEXP _latent_count(SEXP XSEXP, SEXP nSEXP, SEXP max_XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type max_X(max_XSEXP);
    rcpp_result_gen = Rcpp::wrap(count(X, n, max_X));
    return rcpp_result_gen;
END_RCPP
}
// joint_frequency_table
std::vector<std::vector<int>> joint_frequency_table(const std::vector<int>& X, const int n, const int max_X, const std::vector<int>& Y, const int max_Y);
RcppExport SEXP _latent_joint_frequency_table(SEXP XSEXP, SEXP nSEXP, SEXP max_XSEXP, SEXP YSEXP, SEXP max_YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type max_X(max_XSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const int >::type max_Y(max_YSEXP);
    rcpp_result_gen = Rcpp::wrap(joint_frequency_table(X, n, max_X, Y, max_Y));
    return rcpp_result_gen;
END_RCPP
}
// MVPHI
double MVPHI(double z);
RcppExport SEXP _latent_MVPHI(SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(MVPHI(z));
    return rcpp_result_gen;
END_RCPP
}
// dbinorm
double dbinorm(double p, double x, double y);
RcppExport SEXP _latent_dbinorm(SEXP pSEXP, SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(dbinorm(p, x, y));
    return rcpp_result_gen;
END_RCPP
}
// pbinorm
double pbinorm(const double lower0, const double lower1, const double upper0, const double upper1, const double rho, const double mvphi0, const double mvphi1, const double mvphi2, const double mvphi3);
RcppExport SEXP _latent_pbinorm(SEXP lower0SEXP, SEXP lower1SEXP, SEXP upper0SEXP, SEXP upper1SEXP, SEXP rhoSEXP, SEXP mvphi0SEXP, SEXP mvphi1SEXP, SEXP mvphi2SEXP, SEXP mvphi3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type lower0(lower0SEXP);
    Rcpp::traits::input_parameter< const double >::type lower1(lower1SEXP);
    Rcpp::traits::input_parameter< const double >::type upper0(upper0SEXP);
    Rcpp::traits::input_parameter< const double >::type upper1(upper1SEXP);
    Rcpp::traits::input_parameter< const double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double >::type mvphi0(mvphi0SEXP);
    Rcpp::traits::input_parameter< const double >::type mvphi1(mvphi1SEXP);
    Rcpp::traits::input_parameter< const double >::type mvphi2(mvphi2SEXP);
    Rcpp::traits::input_parameter< const double >::type mvphi3(mvphi3SEXP);
    rcpp_result_gen = Rcpp::wrap(pbinorm(lower0, lower1, upper0, upper1, rho, mvphi0, mvphi1, mvphi2, mvphi3));
    return rcpp_result_gen;
END_RCPP
}
// fpoly
double fpoly(double p, std::vector<double> tau1, std::vector<double> tau2, std::vector<double> mvphi1, std::vector<double> mvphi2, std::vector<std::vector<int>> n);
RcppExport SEXP _latent_fpoly(SEXP pSEXP, SEXP tau1SEXP, SEXP tau2SEXP, SEXP mvphi1SEXP, SEXP mvphi2SEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type tau1(tau1SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type mvphi1(mvphi1SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type mvphi2(mvphi2SEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<int>> >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(fpoly(p, tau1, tau2, mvphi1, mvphi2, n));
    return rcpp_result_gen;
END_RCPP
}
// fpoly2
double fpoly2(arma::mat R, const std::vector<arma::vec>& tau, const std::vector<arma::vec>& mvphi, const std::vector<std::vector<std::vector<int>>>& n);
RcppExport SEXP _latent_fpoly2(SEXP RSEXP, SEXP tauSEXP, SEXP mvphiSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::vec>& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::vec>& >::type mvphi(mvphiSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<std::vector<int>>>& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(fpoly2(R, tau, mvphi, n));
    return rcpp_result_gen;
END_RCPP
}
// poly_deriv
Rcpp::List poly_deriv(double rho, std::vector<double> tau1, std::vector<double> tau2, std::vector<double> mvphi1, std::vector<double> mvphi2, std::vector<std::vector<int>> n);
RcppExport SEXP _latent_poly_deriv(SEXP rhoSEXP, SEXP tau1SEXP, SEXP tau2SEXP, SEXP mvphi1SEXP, SEXP mvphi2SEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type tau1(tau1SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type mvphi1(mvphi1SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type mvphi2(mvphi2SEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<int>> >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(poly_deriv(rho, tau1, tau2, mvphi1, mvphi2, n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_latent_soft", (DL_FUNC) &_latent_soft, 2},
    {"_latent_optimizer", (DL_FUNC) &_latent_optimizer, 4},
    {"_latent_polyfast", (DL_FUNC) &_latent_polyfast, 8},
    {"_latent_asymptotic_normal", (DL_FUNC) &_latent_asymptotic_normal, 1},
    {"_latent_asymptotic_general", (DL_FUNC) &_latent_asymptotic_general, 1},
    {"_latent_DACOV2", (DL_FUNC) &_latent_DACOV2, 5},
    {"_latent_orth", (DL_FUNC) &_latent_orth, 1},
    {"_latent_oblq", (DL_FUNC) &_latent_oblq, 1},
    {"_latent_poblq", (DL_FUNC) &_latent_poblq, 2},
    {"_latent_rorth", (DL_FUNC) &_latent_rorth, 2},
    {"_latent_roblq", (DL_FUNC) &_latent_roblq, 2},
    {"_latent_rpoblq", (DL_FUNC) &_latent_rpoblq, 3},
    {"_latent_grad_comp", (DL_FUNC) &_latent_grad_comp, 6},
    {"_latent_vcov_all", (DL_FUNC) &_latent_vcov_all, 5},
    {"_latent_real_sqrtmat", (DL_FUNC) &_latent_real_sqrtmat, 1},
    {"_latent_count", (DL_FUNC) &_latent_count, 3},
    {"_latent_joint_frequency_table", (DL_FUNC) &_latent_joint_frequency_table, 5},
    {"_latent_MVPHI", (DL_FUNC) &_latent_MVPHI, 1},
    {"_latent_dbinorm", (DL_FUNC) &_latent_dbinorm, 3},
    {"_latent_pbinorm", (DL_FUNC) &_latent_pbinorm, 9},
    {"_latent_fpoly", (DL_FUNC) &_latent_fpoly, 6},
    {"_latent_fpoly2", (DL_FUNC) &_latent_fpoly2, 4},
    {"_latent_poly_deriv", (DL_FUNC) &_latent_poly_deriv, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_latent(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
